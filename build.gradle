def webProjects = [project(':site')]
def javaVersion = '1.8'

buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        logbackVersion = '1.1.3'
        slf4jVersion = '1.7.11'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
}

configure(allprojects){
    apply plugin: 'java'
    apply plugin: 'groovy'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    repositories{
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.11'
        implementation 'org.codehaus.groovy:groovy-all:2.4.1'
        testImplementation "org.spockframework:spock-core:1.1-groovy-2.4"
        testImplementation( 'com.athaydes:spock-reports:1.4.0' ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
        testImplementation "cglib:cglib-nodep:3.1"

        implementation ("ch.qos.logback:logback-classic:${logbackVersion}")
        implementation ("ch.qos.logback:logback-core:${logbackVersion}")
        implementation ("org.slf4j:slf4j-api:${slf4jVersion}")
        implementation "org.apache.logging.log4j:log4j-api:2.8.2"
        implementation "org.apache.logging.log4j:log4j-to-slf4j:2.8.2"
    }
    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    version = '1.0.0'
    idea.module {
        excludeDirs += [
                file('bin'),      // containing build artifacts from Eclipse (if any)
                file('work'),     // containing transient artifacts used by embedded Tomcat
                file('logs'),     // containing app logs written by embedded Tomcat
                file('data'),
                file('.settings') // containing intentionally checked-in Eclipse metadata
        ]
    }
}

configure(webProjects){
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'war'
}